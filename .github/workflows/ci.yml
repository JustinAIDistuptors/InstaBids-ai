name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      # Run a local Supabase instance for testing
      supabase:
        image: supabase/postgres:latest # Using the standard postgres image for Supabase
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio psycopg2-binary # Added psycopg2-binary for psql
          
      - name: Wait for Supabase to be ready
        run: |
          echo "Waiting for Supabase to be ready..."
          # On GitHub Actions, localhost refers to the runner itself. The service is on a different host.
          # We need to use 'supabase' as the host name, which is the service name.
          timeout 60 bash -c 'until pg_isready -h supabase -p 5432 -U postgres; do echo "Waiting for db..."; sleep 1; done'
          echo "Supabase is ready!"
          
      - name: Apply migrations
        run: |
          for f in db/migrations/*.sql; do
            PGPASSWORD=postgres psql -h supabase -p 5432 -U postgres -d postgres -f "$f"
          done
          
      - name: Run backend tests
        env:
          SUPABASE_URL: http://supabase:5432 # Service name for URL
          SUPABASE_ANON_KEY: anon_key_for_testing # Placeholder actual key
          SUPABASE_SERVICE_ROLE_KEY: service_role_key_for_testing # Placeholder actual key
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-dummy-key-for-testing' }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'dummy-key-for-testing' }}
        run: |
          pytest -v tests/unit tests/integration # Assuming tests directories exist

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install pnpm
        run: npm install -g pnpm # Or use a setup-pnpm action
        
      - name: Install dependencies
        run: |
          # Assuming frontend code is in a 'frontend' directory
          cd frontend
          pnpm install
          
      - name: Run linting
        run: |
          cd frontend
          pnpm run lint
          
      - name: Run frontend tests
        run: |
          cd frontend
          pnpm run test
          
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      supabase:
        image: supabase/postgres:latest
        ports:
          - 54322:5432 # Using a different host port to avoid conflict if run locally
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies (backend & frontend)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install uvicorn psycopg2-binary # For running server and psql
          cd frontend
          pnpm install
          cd .. # Back to root
          
      - name: Apply migrations to E2E Supabase
        run: |
          echo "Waiting for E2E Supabase to be ready..."
          timeout 60 bash -c 'until pg_isready -h supabase -p 5432 -U postgres; do echo "Waiting for e2e db..."; sleep 1; done'
          echo "E2E Supabase is ready!"
          for f in db/migrations/*.sql; do
            PGPASSWORD=postgres psql -h supabase -p 5432 -U postgres -d postgres -f "$f"
          done
          
      - name: Start backend server for E2E
        env:
          SUPABASE_URL: http://supabase:5432 # Service name for URL
          SUPABASE_ANON_KEY: anon_key_for_testing
          SUPABASE_SERVICE_ROLE_KEY: service_role_key_for_testing
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-dummy-key-for-testing' }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'dummy-key-for-testing' }}
          ALLOWED_ORIGINS: http://localhost:3000 # Frontend will run on runner's localhost
        run: |
          uvicorn src.instabids.api.main:app --host 0.0.0.0 --port 8000 & # Corrected path to main:app
          sleep 10  # Give the server ample time to start
          
      - name: Start frontend server for E2E
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000 # Backend is on runner's localhost via port mapping
          NEXT_PUBLIC_SUPABASE_URL: http://supabase:5432 # Supabase service name
          NEXT_PUBLIC_SUPABASE_ANON_KEY: anon_key_for_testing
        run: |
          cd frontend
          pnpm run build
          pnpm run start & # Starts on port 3000 by default
          sleep 10 # Give the server ample time to start
          cd .. # Back to root
          
      - name: Run Cypress tests
        env:
          CYPRESS_BASE_URL: http://localhost:3000 # Frontend URL
        run: |
          # Assuming Cypress is set up in the frontend directory
          cd frontend 
          # Need to install Cypress if not in devDependencies, or use a Cypress GitHub Action
          # Example: pnpm exec cypress run 
          # For now, assuming a script `cypress:run` exists in frontend/package.json
          pnpm run cypress:run